// Prisma schema for b2b v2 order management system
// See 01_tech/database_design.md for the canonical design guidelines.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyType {
  ORDERER
  FARMER
}

enum UserRole {
  ORDERER_ADMIN
  ORDERER_STAFF
  FARMER_ADMIN
  FARMER_STAFF
}

enum OrderStatus {
  NEW
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELED
}

enum InventoryMovementType {
  ADJUSTMENT
  ALLOCATE
  DEALLOCATE
  SHIP
}

model Company {
  id        String   @id @default(uuid())
  name      String
  type      CompanyType
  code      String?  @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users             User[]
  products          Product[]          @relation("CompanyProducts")
  ordersAsOrderer   Order[]            @relation("OrderOrderer")
  ordersAsFarmer    Order[]            @relation("OrderFarmer")
  shipTos           ShipTo[]
  farmerRoutes      ShipToFarmerRoute[]
  inventoryLedgers  InventoryLedger[]  @relation("CompanyLedger")

  @@index([type])
}

model User {
  id        String   @id @default(uuid())
  companyId String
  email     String   @unique
  name      String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company  Company     @relation(fields: [companyId], references: [id])
  orders   Order[]     @relation("OrderCreator")
  settings UserSetting?
}

model Product {
  id          String   @id @default(uuid())
  farmerId    String
  name        String
  sku         String?  @unique
  description String?
  unit        String
  unitPrice   Decimal  @db.Decimal(12, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  farmer        Company               @relation("CompanyProducts", fields: [farmerId], references: [id])
  specialPrices ProductSpecialPrice[]
  orderItems    OrderItem[]
  ledgers       InventoryLedger[]

  @@index([farmerId, isActive])
}

model ProductSpecialPrice {
  id        String   @id @default(uuid())
  productId String
  startAt   DateTime
  endAt     DateTime?
  price     Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@index([productId, startAt, endAt])
}

model Order {
  id                String       @id @default(uuid())
  orderCode         String       @unique
  status            OrderStatus  @default(NEW)
  ordererCompanyId  String
  farmerCompanyId   String
  orderedById       String
  discountAmount    Decimal      @default(0) @db.Decimal(12, 2)
  totalAmount       Decimal      @default(0) @db.Decimal(12, 2)
  orderedAt         DateTime     @default(now())
  requestedDelivery DateTime?
  notes             String?
  confirmedAt       DateTime?
  shippedAt         DateTime?
  completedAt       DateTime?
  canceledAt        DateTime?
  trackingNumber    String?
  shipToId          String?
  shipToLabelSnap   String?
  shipToAddressSnap String?
  shipToPhoneSnap   String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  orderer Company @relation("OrderOrderer", fields: [ordererCompanyId], references: [id])
  farmer  Company @relation("OrderFarmer", fields: [farmerCompanyId], references: [id])
  orderedBy User  @relation("OrderCreator", fields: [orderedById], references: [id])
  shipTo    ShipTo? @relation(fields: [shipToId], references: [id])
  items     OrderItem[]
  ledgers   InventoryLedger[]
}

model OrderItem {
  id               String   @id @default(uuid())
  orderId          String
  productId        String
  productNameSnap  String
  productSkuSnap   String?
  unit             String
  quantity         Decimal  @db.Decimal(10, 2)
  unitPrice        Decimal  @db.Decimal(12, 2)
  totalPrice       Decimal  @db.Decimal(12, 2)
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  ledgers InventoryLedger[]

  @@index([orderId])
}

model InventoryLedger {
  id              String                @id @default(uuid())
  productId       String
  farmerCompanyId String
  orderId         String?
  orderItemId     String?
  movementType    InventoryMovementType
  quantity        Decimal               @db.Decimal(10, 2)
  occurredAt      DateTime              @default(now())
  note            String?
  createdAt       DateTime              @default(now())

  product Product @relation(fields: [productId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id])
  orderItem OrderItem? @relation(fields: [orderItemId], references: [id])
  farmer  Company @relation("CompanyLedger", fields: [farmerCompanyId], references: [id])

  @@index([productId, occurredAt])
  @@index([orderId])
}

model ShipTo {
  id          String   @id @default(uuid())
  companyId   String
  label       String
  postalCode  String?
  address     String
  phoneNumber String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company  @relation(fields: [companyId], references: [id])
  orders  Order[]
  routes  ShipToFarmerRoute[]

  @@unique([companyId, label])
}

model ShipToFarmerRoute {
  id              String   @id @default(uuid())
  shipToId        String
  farmerCompanyId String
  isEnabled       Boolean  @default(true)
  createdAt       DateTime @default(now())

  shipTo ShipTo  @relation(fields: [shipToId], references: [id])
  farmer Company @relation(fields: [farmerCompanyId], references: [id])

  @@unique([shipToId, farmerCompanyId])
}

model UserSetting {
  id                String   @id @default(uuid())
  userId            String   @unique
  lineUserId        String?
  lineEnabled       Boolean  @default(false)
  notificationFlags Json?    // reserved for future toggles
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
